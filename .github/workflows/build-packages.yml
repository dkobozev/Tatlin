name: Build Packages and Create Release

on:
  push:
    tags:
      - "*"

jobs:
  build-deb:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # the repo is checkout out to /home/runner/work/tatlin/tatlin

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install debhelper
          sudo apt-get install dh-python
          sudo apt-get install python3-all
          sudo apt-get install python3-dev
          sudo apt-get install python3-setuptools
          sudo apt-get install python3-numpy
          sudo apt-get install python3-opengl
          sudo apt-get install python3-pil
          sudo apt-get install python3-six

      - name: Build DEB package
        run: |
          dpkg-buildpackage -b -rfakeroot -us -uc

      - name: Upload DEB package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: deb-package
          path: /home/runner/work/tatlin/*_all.deb

  build-rpm:
    runs-on: ubuntu-latest

    container:
      image: fedora:38

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo dnf install -y python3
          sudo dnf install -y rpm-build
          sudo dnf install -y python3-devel
          sudo dnf install -y python3-wxpython4
          sudo dnf install -y python3-numpy
          sudo dnf install -y python3-pyopengl
          sudo dnf install -y python3-pillow
          sudo dnf install -y python3-six

      - name: Build RPM package
        run: |
          VERSION=$(rpm -q --specfile tatlin.spec --qf %{VERSION})
          mkdir -p /github/home/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
          cp tatlin.spec /github/home/rpmbuild/SPECS/
          mkdir /github/home/tatlin-$VERSION
          cp -r * /github/home/tatlin-$VERSION
          cd /github/home
          tar -czvf rpmbuild/SOURCES/tatlin-$VERSION.tar.gz tatlin-$VERSION
          rpmbuild -ba rpmbuild/SPECS/tatlin.spec
        shell: bash

      - name: Upload RPM package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: rpm-package
          path: /github/home/rpmbuild/RPMS/noarch/*.rpm

  build-win:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Create virtual environment
        run: python -m venv venv
        shell: cmd

      - name: Activate virtual environment
        run: .\venv\Scripts\activate.bat
        shell: cmd

      - name: Install dependencies using pip
        run: pip install -r requirements-win.txt
        shell: cmd

      - name: Install PyOpenGL
        run: pip install https://download.lfd.uci.edu/pythonlibs/archived/PyOpenGL-3.1.6-cp311-cp311-win_amd64.whl
        shell: cmd

      - name: Install PyOpenGL_accelerate
        run: pip install https://download.lfd.uci.edu/pythonlibs/archived/PyOpenGL_accelerate-3.1.6-cp311-cp311-win_amd64.whl
        shell: cmd

      - name: Install pyinstaller
        run: pip install pyinstaller
        shell: cmd

      - name: Build Windows package
        run: pyinstaller tatlin.win.spec
        shell: cmd

      - name: Zip Windows package
        run: cd dist & 7z a tatlin-win.zip tatlin
        shell: cmd

      - name: Upload Windows package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: win-package
          path: ./dist/tatlin-win.zip

  build-mac:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Create virtual environment
        run: python -m venv venv

      - name: Activate virtual environment
        run: source venv/bin/activate

      - name: Install dependencies using pip
        run: pip install -r requirements.txt

      - name: Install pyinstaller
        run: pip install pyinstaller

      - name: Build Mac package
        run: pyinstaller tatlin.mac.spec

      - name: List dir
        run: ls -l dist

      - name: Zip Mac package
        run: cd dist && 7z a tatlin-mac.zip tatlin.app

      - name: Upload Mac package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: mac-package
          path: ./dist/tatlin-mac.zip

  build-appimage:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install \
            libfuse2 \
            libsdl2-2.0-0 \
            libgdk-pixbuf2.0-0

          sudo /lib/x86_64-linux-gnu/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders --update-cache

          pip install pyinstaller

          # Download AppImage tools
          wget --no-verbose "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage" -O linuxdeploy
          chmod +x linuxdeploy

      - name: Install Tatlin dependencies
        run: |
          pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04 wxPython
          pip install -r requirements-appimage.txt

      - name: Run PyInstaller
        run: |
          # add gdk-pixbuf-2.0 to PATH to avoid errors, see: https://github.com/pyinstaller/pyinstaller/issues/4485
          env PATH="$PATH:/usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0" pyinstaller -y tatlin-appimage.spec

      - name: Build AppImage
        run: |
          # Create an AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/opt/tatlin
          mkdir -p AppDir/usr/share/applications/
          mkdir -p AppDir/usr/share/icons/hicolor/64x64/apps/

          mv dist/tatlin/* AppDir/usr/opt/tatlin/
          cd AppDir/usr/bin
          ln -s ../opt/tatlin/tatlin tatlin
          cd ../../..
          cp tatlin.desktop AppDir/usr/share/applications/
          cp tatlin/tatlin.png AppDir/usr/share/icons/hicolor/64x64/apps/

          ./linuxdeploy --appdir AppDir --output appimage

      - name: Upload AppImage as artifact
        uses: actions/upload-artifact@v2
        with:
          name: appimage-package
          path: Tatlin-x86_64.AppImage

  create-release:
    needs: [build-deb, build-rpm, build-win, build-mac, build-appimage]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # the repo is checkout out to /home/runner/work/tatlin/tatlin
        with:
          fetch-depth: 0 # fetch all history so that we can get the commit messages

      - name: Get commit messages
        continue-on-error: true # Continue even if there is no previous tag
        run: |
          git fetch --tags
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))
          COMMIT_MESSAGES=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
          echo "COMMIT_MESSAGES=${COMMIT_MESSAGES}"
          echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV
          echo "${COMMIT_MESSAGES}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Download DEB package
        uses: actions/download-artifact@v3
        with:
          name: deb-package
          path: ./packages/

      - name: Download RPM package
        uses: actions/download-artifact@v3
        with:
          name: rpm-package
          path: ./packages/

      - name: Download Windows package
        uses: actions/download-artifact@v3
        with:
          name: win-package
          path: ./packages/

      - name: Download Mac package
        uses: actions/download-artifact@v3
        with:
          name: mac-package
          path: ./packages/

      - name: Download AppImage package
        uses: actions/download-artifact@v3
        with:
          name: appimage-package
          path: ./packages/

      # The GitHub CLI is pre-installed on GitHub-hosted runners.
      # https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows
      - name: Create GitHub Release and Upload Packages
        run: |
          TAG_NAME=${{ github.ref }}
          TAG_NAME=${TAG_NAME##refs/tags/}
          pwd
          gh release create $TAG_NAME /home/runner/work/tatlin/tatlin/packages/* --title "$TAG_NAME" --notes "Changes:"$'\n'"$COMMIT_MESSAGES" --draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
